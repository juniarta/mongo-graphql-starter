export async function load${objName}s(db, queryPacket, root, args, context, ast) {
  let { $match, $project, $sort, $limit, $skip } = queryPacket;

  let aggregateItems = [
    { $match }, 
    $sort ? { $sort } : null, 
    { $project },
    $skip != null ? { $skip } : null, 
    $limit != null ? { $limit } : null
  ].filter(item => item);

  await processHook(hooksObj, "${objName}", "queryPreAggregate", aggregateItems, { db, root, args, context, ast });
  let ${objName}s = await dbHelpers.runQuery(db, "${table}", aggregateItems);
  await processHook(hooksObj, "${objName}", "adjustResults", ${objName}s);
  ${objName}s.forEach(o => {
    if (o._id){
      o._id = "" + o._id;
    }
  });
  cleanUpResults(${objName}s, ${objName}Metadata);
  return ${objName}s;
}

export const ${objName} = {
${relationshipResolvers}
${typeExtras}
}

export default {
  Query: {
${queryItems}
  },
  Mutation: {
${mutationItems}
  }
};
