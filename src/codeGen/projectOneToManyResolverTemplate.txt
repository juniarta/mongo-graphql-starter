  async ${targetObjName}(obj, args, context, ast) {
    if (context.${dataLoaderId} == null) {
      let db = await context.__mongodb;
      context.${dataLoaderId} = new DataLoader(async keys => {
        let $match = { ${keyField}: { $in: keys.filter(id => id).map(${idMapping}) } };
        let queryPacket = decontructGraphqlQuery(args, ast, ${targetTypeName}Metadata, null${receivingKeyForce});
        let { $project, $sort, $limit, $skip } = queryPacket;
        
        let aggregateItems = [{ $match }, $sort ? { $sort } : null, { $project }].filter(item => item);
        let results = await dbHelpers.runQuery(db, "${table}", aggregateItems);
        cleanUpResults(results, ${targetTypeName}Metadata);
        let finalResult = keys.map(keyArr => []);

        for (let result of results){
          let keyLookup = new Set(${lookupSetContents});
          for (let i = 0; i < keys.length; i++){
            if (keyLookup.has("" + keys[i])) {
              finalResult[i].push(result);
            }
          }
        }
        return finalResult;
      });
    }
    return context.${dataLoaderId}.load(obj.${fkField} || []);
  }